/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as SettingsIntegrationsRouteImport } from './routes/settings/integrations'
import { Route as SettingsBillingRouteImport } from './routes/settings/billing'
import { Route as SettingsApiKeysRouteImport } from './routes/settings/apiKeys'

const ProjectsLazyRouteImport = createFileRoute('/projects')()
const SettingsRouteLazyRouteImport = createFileRoute('/settings')()
const ProjectProjectIdLazyRouteImport = createFileRoute('/project/$projectId')()
const ChatChatIdIndexLazyRouteImport = createFileRoute('/chat/$chatId/')()

const ProjectsLazyRoute = ProjectsLazyRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/projects.lazy').then((d) => d.Route))
const SettingsRouteLazyRoute = SettingsRouteLazyRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/settings/route.lazy').then((d) => d.Route),
)
const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectProjectIdLazyRoute = ProjectProjectIdLazyRouteImport.update({
  id: '/project/$projectId',
  path: '/project/$projectId',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/project.$projectId.lazy').then((d) => d.Route),
)
const SettingsIntegrationsRoute = SettingsIntegrationsRouteImport.update({
  id: '/integrations',
  path: '/integrations',
  getParentRoute: () => SettingsRouteLazyRoute,
} as any)
const SettingsBillingRoute = SettingsBillingRouteImport.update({
  id: '/billing',
  path: '/billing',
  getParentRoute: () => SettingsRouteLazyRoute,
} as any)
const SettingsApiKeysRoute = SettingsApiKeysRouteImport.update({
  id: '/apiKeys',
  path: '/apiKeys',
  getParentRoute: () => SettingsRouteLazyRoute,
} as any)
const ChatChatIdIndexLazyRoute = ChatChatIdIndexLazyRouteImport.update({
  id: '/chat/$chatId/',
  path: '/chat/$chatId/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/chat/$chatId/index.lazy').then((d) => d.Route),
)

export interface FileRoutesByFullPath {
  '/auth': typeof AuthRoute
  '/settings': typeof SettingsRouteLazyRouteWithChildren
  '/projects': typeof ProjectsLazyRoute
  '/settings/apiKeys': typeof SettingsApiKeysRoute
  '/settings/billing': typeof SettingsBillingRoute
  '/settings/integrations': typeof SettingsIntegrationsRoute
  '/project/$projectId': typeof ProjectProjectIdLazyRoute
  '/chat/$chatId': typeof ChatChatIdIndexLazyRoute
}
export interface FileRoutesByTo {
  '/auth': typeof AuthRoute
  '/settings': typeof SettingsRouteLazyRouteWithChildren
  '/projects': typeof ProjectsLazyRoute
  '/settings/apiKeys': typeof SettingsApiKeysRoute
  '/settings/billing': typeof SettingsBillingRoute
  '/settings/integrations': typeof SettingsIntegrationsRoute
  '/project/$projectId': typeof ProjectProjectIdLazyRoute
  '/chat/$chatId': typeof ChatChatIdIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/auth': typeof AuthRoute
  '/settings': typeof SettingsRouteLazyRouteWithChildren
  '/projects': typeof ProjectsLazyRoute
  '/settings/apiKeys': typeof SettingsApiKeysRoute
  '/settings/billing': typeof SettingsBillingRoute
  '/settings/integrations': typeof SettingsIntegrationsRoute
  '/project/$projectId': typeof ProjectProjectIdLazyRoute
  '/chat/$chatId/': typeof ChatChatIdIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/auth'
    | '/settings'
    | '/projects'
    | '/settings/apiKeys'
    | '/settings/billing'
    | '/settings/integrations'
    | '/project/$projectId'
    | '/chat/$chatId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/auth'
    | '/settings'
    | '/projects'
    | '/settings/apiKeys'
    | '/settings/billing'
    | '/settings/integrations'
    | '/project/$projectId'
    | '/chat/$chatId'
  id:
    | '__root__'
    | '/auth'
    | '/settings'
    | '/projects'
    | '/settings/apiKeys'
    | '/settings/billing'
    | '/settings/integrations'
    | '/project/$projectId'
    | '/chat/$chatId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthRoute: typeof AuthRoute
  SettingsRouteLazyRoute: typeof SettingsRouteLazyRouteWithChildren
  ProjectsLazyRoute: typeof ProjectsLazyRoute
  ProjectProjectIdLazyRoute: typeof ProjectProjectIdLazyRoute
  ChatChatIdIndexLazyRoute: typeof ChatChatIdIndexLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/project/$projectId': {
      id: '/project/$projectId'
      path: '/project/$projectId'
      fullPath: '/project/$projectId'
      preLoaderRoute: typeof ProjectProjectIdLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/integrations': {
      id: '/settings/integrations'
      path: '/integrations'
      fullPath: '/settings/integrations'
      preLoaderRoute: typeof SettingsIntegrationsRouteImport
      parentRoute: typeof SettingsRouteLazyRoute
    }
    '/settings/billing': {
      id: '/settings/billing'
      path: '/billing'
      fullPath: '/settings/billing'
      preLoaderRoute: typeof SettingsBillingRouteImport
      parentRoute: typeof SettingsRouteLazyRoute
    }
    '/settings/apiKeys': {
      id: '/settings/apiKeys'
      path: '/apiKeys'
      fullPath: '/settings/apiKeys'
      preLoaderRoute: typeof SettingsApiKeysRouteImport
      parentRoute: typeof SettingsRouteLazyRoute
    }
    '/chat/$chatId/': {
      id: '/chat/$chatId/'
      path: '/chat/$chatId'
      fullPath: '/chat/$chatId'
      preLoaderRoute: typeof ChatChatIdIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface SettingsRouteLazyRouteChildren {
  SettingsApiKeysRoute: typeof SettingsApiKeysRoute
  SettingsBillingRoute: typeof SettingsBillingRoute
  SettingsIntegrationsRoute: typeof SettingsIntegrationsRoute
}

const SettingsRouteLazyRouteChildren: SettingsRouteLazyRouteChildren = {
  SettingsApiKeysRoute: SettingsApiKeysRoute,
  SettingsBillingRoute: SettingsBillingRoute,
  SettingsIntegrationsRoute: SettingsIntegrationsRoute,
}

const SettingsRouteLazyRouteWithChildren =
  SettingsRouteLazyRoute._addFileChildren(SettingsRouteLazyRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRoute,
  SettingsRouteLazyRoute: SettingsRouteLazyRouteWithChildren,
  ProjectsLazyRoute: ProjectsLazyRoute,
  ProjectProjectIdLazyRoute: ProjectProjectIdLazyRoute,
  ChatChatIdIndexLazyRoute: ChatChatIdIndexLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
